# Multi-Layer Perceptron - 퍼셉트론을 여러 층으로 구성한 것
# 다층 퍼셉트론을 이용하면서 단층 퍼셉트론에서는 불가능했던 비선형 문제를 해결할 수 있다

import numpy


def sigmoid(x):
    return 1/(1 + numpy.exp(-x))  # 활성화함수(h())로 시그모이드 함수 사용


# 다층 퍼셉트론 은닉층 계산

X = numpy.array([10, 20])  # 임의의 x1, x2값
# 입력층에서 1층 입력 신호로 향하는 가중치 배열
W1 = numpy.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
B1 = numpy.array([1, 2, 3])  # 입력층에서 1층으로 향하는 편향

A1 = numpy.dot(X, W1) + B1  # 1층의 입력 신호를 계산
Z1 = sigmoid(A1)

print('A1 :', A1, 'Z1 :', Z1)


# 다층 퍼셉트론 출력층 계산

# 은닉층에서 출력층 입력 신호로 향하는 가중치는 모두 6개이며, 3행 2열의 임의의 가중치를 갖는 배열
W2 = numpy.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
B2 = numpy.array([0.1, 0.2])  # 은닉층에서 출력층으로 향하는 편향

# 은닉층의 출력값 Z1에 가중치 W2를 곱하고, 편향 B2를 더해 출력층의 입력값 A2를 구함
A2 = numpy.dot(Z1, W2) + B2
Y = sigmoid(A2)  # 출력층의 활성화 함수로 시그모이드 함수를 사용해 최종 Y값을 구함

print('Y :', Y)
